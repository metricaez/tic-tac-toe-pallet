
//! Autogenerated weights for pallet_tictactoe
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-07, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Emilianos-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain=dev
// --steps=20
// --repeat=10
// --pallet=pallet_tictactoe
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/tictactoe/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_tictactoe.
pub trait WeightInfo {
	fn create_game() -> Weight;
	fn join_game() -> Weight;
	fn end_game() -> Weight;
}

/// Weights for pallet_tictactoe using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Tictactoe SafeguardDeposit (r:1 w:0)
	/// Proof: Tictactoe SafeguardDeposit (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tictactoe GameIndex (r:1 w:1)
	/// Proof: Tictactoe GameIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Tictactoe Games (r:0 w:1)
	/// Proof: Tictactoe Games (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	fn create_game() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3593`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(58_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Tictactoe Games (r:1 w:1)
	/// Proof: Tictactoe Games (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	/// Storage: Tictactoe SafeguardDeposit (r:1 w:0)
	/// Proof: Tictactoe SafeguardDeposit (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn join_game() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `3626`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(53_000_000, 3626)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Tictactoe Games (r:1 w:1)
	/// Proof: Tictactoe Games (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	/// Storage: Tictactoe SafeguardDeposit (r:1 w:0)
	/// Proof: Tictactoe SafeguardDeposit (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn end_game() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391`
		//  Estimated: `6196`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(55_000_000, 6196)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Tictactoe SafeguardDeposit (r:1 w:0)
	/// Proof: Tictactoe SafeguardDeposit (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Tictactoe GameIndex (r:1 w:1)
	/// Proof: Tictactoe GameIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Tictactoe Games (r:0 w:1)
	/// Proof: Tictactoe Games (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	fn create_game() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3593`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(58_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Tictactoe Games (r:1 w:1)
	/// Proof: Tictactoe Games (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	/// Storage: Tictactoe SafeguardDeposit (r:1 w:0)
	/// Proof: Tictactoe SafeguardDeposit (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn join_game() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `223`
		//  Estimated: `3626`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(53_000_000, 3626)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Tictactoe Games (r:1 w:1)
	/// Proof: Tictactoe Games (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	/// Storage: Tictactoe SafeguardDeposit (r:1 w:0)
	/// Proof: Tictactoe SafeguardDeposit (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn end_game() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `391`
		//  Estimated: `6196`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(55_000_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
